name: Run Tests

on:
 workflow_dispatch:
 push:
 pull_request_target:

env:
 PROJECT_DIRECTORY: .
 PACKAGE_DIRECTORY: ./Packages/${{ vars.PACKAGE_NAME }}
 UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
 UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
 UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
 
jobs:
 test:
   name: Test in ${{ matrix.testMode }} on ${{ matrix.unityVersion }}
   runs-on: ubuntu-latest
   strategy:
     fail-fast: false
     matrix:
       unityVersion:
         - 2022.3.22f1
       testMode:
         - playmode
         - editmode
         - standalone
   steps:
     - name: Create package testing project
       uses: ./github/actions/create-unity-project
       with: 
         projectDirectory: ${{ env.PROJECT_DIRECTORY }}
         unityVersion: ${{ matrix.unityVersion }}
         manifest: "{}"
     - name: Checkout repository
       uses: actions/checkout@v4
       with:
         path: ${{ env.PACKAGE_DIRECTORY }}

     - name: Create LFS file list
       working-directory: ${{ env.PACKAGE_DIRECTORY }}
       run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

     - name: Restore LFS cache
       uses: actions/cache@v3
       with:
         path: ${{ env.PACKAGE_DIRECTORY }}/.git/lfs
         key: ${{ runner.os }}-lfs-${{ hashFiles('./.lfs-assets-id') }}

     - name: Git LFS Pull
       working-directory: ${{ env.PACKAGE_DIRECTORY }}
       run: |
         git lfs pull
         git add .
         git reset --hard

     - uses: actions/cache@v3
       with:
         path: ${{ env.PROJECT_DIRECTORY }}/Library
         key: Library-${{ hashFiles('${{ env.PROJECT_DIRECTORY }}/Assets/**', '${{ env.PROJECT_DIRECTORY }}/Packages/**', '${{ env.PROJECT_DIRECTORY }}/ProjectSettings/**') }}
         restore-keys: |
           Library-

     - uses: game-ci/unity-test-runner@v4
       with:
         unityVersion: ${{ matrix.unityVersion }}
         testMode: ${{ matrix.testMode }}
         artifactsPath: ${{ matrix.testMode }}-artifacts
         githubToken: ${{ secrets.GITHUB_TOKEN }}
         checkName: ${{ matrix.testMode }} Test Results
         coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
         projectPath: ${{ env.PROJECT_DIRECTORY }}

     - uses: actions/upload-artifact@v4
       if: always()
       with:
         name: Test results for ${{ matrix.testMode }} on ${{ matrix.unityVersion }}
         path: ${{ env.PROJECT_DIRECTORY }}/${{ steps.tests.outputs.artifactsPath }}

     - uses: actions/upload-artifact@v4
       if: always()
       with:
         name: Coverage results for ${{ matrix.testMode }} on ${{ matrix.unityVersion }}
         path: ${{ env.PROJECT_DIRECTORY }}/${{ steps.tests.outputs.coveragePath }}
